#!/usr/bin/env node

/** 
    Starting point for conversion of html-files to json,
    command line input parameters are defined here. 
    The reading of the files is also done here. 
    If specifying a folder as input, the subfolder-tree is also searched for .html files,
    the whole folder-structure is mirrored in the output folder. 
**/

const Program     = require('commander')
const fs          = require('fs')
const path        = require('path')
const mkdirp      = require('mkdirp')
const async       = require('async')
var   callCounter = require('../lib/callCounter');

Program
    .option('-o, --outputdir <dir>', 'Output directory', './output')
    .option('-i, --inputdir <dir>','Input directory with html files')
    .option('-p, --print', 'Print to STDOUT', false)
    .option('-n, --parallel <num>', 'Parallel conversions', parseInt, 5)
    .option('-f, --inputfiles <files>','Input files ' ) 
    .option('-l, --lse', 'do line segment analysis in the end', false)
    .option('-e, --expvi', 'export vocabulary file', false)
    .option('-c, --hocr','read in hocr files', false)
    .parse(process.argv); 

var inputFolder_isGiven = false;    //indicator if there is some valid inputfolder or files given 
var fileslist;                      //list of files which will get parsed 

//Run the program
if (process.argv.length <= 2){
    //Show help if there are not enough input arguments
     process.argv.push('--help');           
     Program.parse(process.argv);           
     process.exit();
}

//Check if there are valid files in folder input arguments, and add them to 'fileslist'-array 
handleFolderAndFileInput(hocr=Program.hocr); 
//Create output directory, if not defined per argument use './output'
mkdirp.sync(Program.outputdir);            


if (Program.hocr){
    console.log("Parsing .hocr-files instead of .html")
}


parseFiles(fileslist,Program.parallel,Program.lse, Program.expv, Program.hocr); //Parse the html-fileslist


/**
 * Check if there is an input directory specified from command line parameters.
 * If there is a folder and input-files specfies, prefer input-files from folder
 * If there is no inputfiles or files, just log this and close the program
 * If there are only input-files specified, take these for input
 */
function handleFolderAndFileInput(hocr=false){
    if(Program.inputdir){
        console.log('Specified input directory is: %j', Program.inputdir);
        if(!fs.lstatSync(Program.inputdir).isDirectory()){
            console.log("Specified path is not a directory");    
        }else{
            var files = walk(Program.inputdir); //Get all files in directory and subdirectories 
            fileslist = files.filter( function( elm ) {
                if (hocr==false){
                    //use standard way of html filtering
                    return elm.match(/.*\.(html)/ig);

                }else{
                    //look for .hocr-files 
                    return elm.match(/.*\.(hocr)/ig);
                }
            });
            if(fileslist.length>0){
                console.log("Valid input directory was specified, continuing with parsing"); 
                inputFolder_isGiven = true; 
            }
        }
    }
        
    if(inputFolder_isGiven && Program.inputfiles){
        console.log("Ignoring specfied files from -i or --inputfiles option, because files are already specified via --inputdir option ");
    }else{
        if(!inputFolder_isGiven && !Program.inputfiles){
            console.log("No input data specified at all, please specify with --inputfiles or --inputdir option, exit process");
            process.exit();
        }
        if(!inputFolder_isGiven && Program.inputfiles ){
            console.log('Specified input-files are: %j', Program.inputfiles);
            fileslist = []; 
            fileslist.push(Program.inputfiles); 
        }
    }
}
/**
 * Parse the specified files, which means, read in each file and call the parser.js
 * functionality for each file specified. Save the output of parser.js to a json file.
 * If there is an error during the parsing of one file, push the error to a stack which 
 * is printed in the end of the run. 
 * 
 * @param parallel {integer} number of maximal async calls of the parser at once 
 * @param filePaths {array} list of paths and filenames of the specified files 
 * @param doLSE {boolean} do a line segment analysis after parsing
 * @param doExpv {boolean} export vocabulary at the end 
 * @param doHocr {boolean} use .hocr-files instead of .html-files
 */
function parseFiles(filePaths, parallel, doLSE, doExpv, doHocr){
    const parser = new(require('../lib/parser'))();
    const failed = [];
    parser.setExportVocabulary(doExpv);

    async.eachLimit(filePaths, parallel, (filepath, done) => {
        
        var basenameFile = path.basename(filepath);
        var dirnameFiles = path.dirname(filepath);           //Extract directory name from htmlfile
        var outputDir = Program.outputdir+"\\"+dirnameFiles; //Create output directory path 
        mkdirs(outputDir);                                  //Create output directory

        //define output file name
        const outname = path.join(outputDir, path.basename(filepath) + '.json'); 
        
        try {
            var json;
            if (!doHocr){
                json = parser.parseFile(filepath);
            }else{
                json = parser.parseFileHocr(filepath)
            }
            if (Program.print) {
                //Print the whole created json file if defined in input parameters
                console.log(json);
            } else {
                //Otherwise just print in- and output file names. 
                console.error(`${filepath} -> ${outname}`);
            }
            //Write json to output path
            fs.writeFile(outname, JSON.stringify(json, null, 2), done)
        } catch (e) {
            //If there is an exception, push it to the errors-stack
            console.log("*** ERROR ERROR ERROR ***",e);
            failed.push([filepath, e]);
            done()
        }
    }, () => {
        //After parsing....
        console.log("Endpoint reached");

        //Do a line segment analysis in the end, if specified
        if(doLSE){
            parser.doLineSegmentAnalysis(null,"kapitalentwicklung",true);
        }
        //Print how often each function in parser was called
        callCounter.printCallcount();

        //Print the error stack, if there are some errors
        if (failed.length) {
            console.log("There where some errors during parsing html: ",failed)
        }
    })
}

/**
 * Reads the folderstructure of a given directory and all the subfolders 
 * @param {string} dir path to directory  
 * @returns list of files to the directories 
 */
function walk(dir) {
    var results = []
    var list = fs.readdirSync(dir)
    list.forEach(function(file) {
        file = dir + '\\' + file
        var stat = fs.statSync(file)
        if (stat && stat.isDirectory()) results = results.concat(walk(file))
        else results.push(file)
    })
    return results
}


/**
 * Creates all subdirectories for a given path, if they don't exist 
 * @param {string} path to which the subdirectories are set. 
 */
function mkdirs(path) {
    path = path.replace(/\\/g,'/');
    var dirs = path.split('/');
    var prevDir = dirs.splice(0,1)+"/";
    while(dirs.length > 0) {
        var curDir = prevDir + dirs.splice(0,1);
        if (! fs.existsSync(curDir) ) {
            fs.mkdirSync(curDir);
        }
        prevDir = curDir + '/';
    }
}